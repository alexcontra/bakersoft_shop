// Mocks generated by Mockito 5.3.2 from annotations
// in baker_soft_shop/test/features/preview_products/presentation/bloc/product_page_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:baker_soft_shop/core/error/failure.dart' as _i6;
import 'package:baker_soft_shop/features/preview_products/data/models/product_model/product_model.dart'
    as _i7;
import 'package:baker_soft_shop/features/preview_products/domain/repositories/product_repository.dart'
    as _i2;
import 'package:baker_soft_shop/features/preview_products/domain/usecases/product_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUseCase extends _i1.Mock implements _i4.ProductUseCase {
  MockProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get previewAllProductsRepository => (super.noSuchMethod(
        Invocation.getter(#previewAllProductsRepository),
        returnValue: _FakeProductRepository_0(
          this,
          Invocation.getter(#previewAllProductsRepository),
        ),
      ) as _i2.ProductRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(
          _i7.ProductModel? productModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [productModel],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [productModel],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [ProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRepository extends _i1.Mock implements _i2.ProductRepository {
  MockProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> saveCurrentProductInLocalStore(
          _i7.ProductModel? productModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveCurrentProductInLocalStore,
          [productModel],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #saveCurrentProductInLocalStore,
            [productModel],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
