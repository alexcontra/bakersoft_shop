// Mocks generated by Mockito 5.3.2 from annotations
// in baker_soft_shop/test/features/preview_products/presentation/bloc/preview_all_products_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:baker_soft_shop/core/error/failure.dart' as _i6;
import 'package:baker_soft_shop/features/preview_products/data/models/news_feed_products/news_feed_products.dart'
    as _i7;
import 'package:baker_soft_shop/features/preview_products/domain/repositories/preview_all_products_repository.dart'
    as _i2;
import 'package:baker_soft_shop/features/preview_products/domain/usecases/preview_all_products_usecase.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePreviewAllProductsRepository_0 extends _i1.SmartFake
    implements _i2.PreviewAllProductsRepository {
  _FakePreviewAllProductsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PreviewAllProductsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreviewAllProductsUseCase extends _i1.Mock
    implements _i4.PreviewAllProductsUseCase {
  MockPreviewAllProductsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PreviewAllProductsRepository get previewAllProductsRepository =>
      (super.noSuchMethod(
        Invocation.getter(#previewAllProductsRepository),
        returnValue: _FakePreviewAllProductsRepository_0(
          this,
          Invocation.getter(#previewAllProductsRepository),
        ),
      ) as _i2.PreviewAllProductsRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>>.value(
                _FakeEither_1<_i6.Failure, _i7.NewsFeedModel>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>>);
}

/// A class which mocks [PreviewAllProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreviewAllProductsRepository extends _i1.Mock
    implements _i2.PreviewAllProductsRepository {
  MockPreviewAllProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>>
      getNewsFeedProducts() => (super.noSuchMethod(
            Invocation.method(
              #getNewsFeedProducts,
              [],
            ),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>>.value(
                    _FakeEither_1<_i6.Failure, _i7.NewsFeedModel>(
              this,
              Invocation.method(
                #getNewsFeedProducts,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, _i7.NewsFeedModel>>);
}
